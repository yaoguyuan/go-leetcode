{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to go-leetcode","text":"<p>A site for leetcoder with golang</p>"},{"location":"hot100/doublePointers/LC283/","title":"LC283 - \u79fb\u52a8\u96f6","text":"MoveZeroes.go<pre><code>package DoublePointers\n\nfunc moveZeroes(nums []int) {\n    moveZeroes2(nums)\n}\n\n// \u65f6\u95f4\u590d\u6742\u5ea6: O(n^2), \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\nfunc moveZeroes1(nums []int) {\n    left, right := 0, len(nums)-1\n    for left &lt;= right {\n        if nums[left] == 0 {\n            moveToEnd(nums, left, right)\n            right--\n        } else {\n            left++\n        }\n    }\n}\n\nfunc moveToEnd(nums []int, left int, right int) {\n    tmp := nums[left]\n    for i := left; i &lt; right; i++ {\n        nums[i] = nums[i+1]\n    }\n    nums[right] = tmp\n}\n\n// \u65f6\u95f4\u590d\u6742\u5ea6: O(n), \u7a7a\u95f4\u590d\u6742\u5ea6: O(1)\nfunc moveZeroes2(nums []int) {\n    left, right := 0, 0\n    for right &lt; len(nums) {\n        if nums[right] != 0 {\n            nums[left], nums[right] = nums[right], nums[left]\n            left++\n        }\n        right++\n    }\n}\n</code></pre> <p><code>moveZeroes1</code>\u65b9\u6cd5\u4e2d\uff0c\u53f3\u4fa7\u6307\u9488\u7ef4\u62a4\u96f6\u533a\uff0c\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u6240\u6709\u975e\u96f6\u6570\u503c\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u6b64\u4e0d\u80fd\u7b80\u5355\u4ea4\u6362\u5de6\u53f3\u6307\u9488\u6307\u5411\u7684\u6570\u5b57\uff0c\u5fc5\u987b\u8fdb\u884c\u6574\u4f53\u7684\u632a\u52a8\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\u3002</p> <p><code>moveZeroes2</code>\u65b9\u6cd5\u4e2d\uff0c\u5de6\u4fa7\u6307\u9488\u7ef4\u62a4\u975e\u96f6\u533a\uff0c\u4ea4\u6362\u64cd\u4f5c\u53ef\u4ee5\u7ef4\u6301\u6240\u6709\u975e\u96f6\u6570\u503c\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4fdd\u6301\u4e0d\u53d8\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002</p>"},{"location":"hot100/hashTable/LC1/","title":"LC1 - \u4e24\u6570\u4e4b\u548c","text":"TwoSum.go<pre><code>package HashTable\n\nimport (\n    \"cmp\"\n    \"slices\"\n)\n\nfunc twoSum(nums []int, target int) []int {\n    return twoSum1(nums, target)\n}\n\ntype indexedNum struct {\n    Value int\n    Index int\n}\n\n// \u65f6\u95f4\u590d\u6742\u5ea6: O(n * log n), \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\nfunc twoSum1(nums []int, target int) []int {\n    indexedNums := make([]indexedNum, len(nums))\n    for i, num := range nums {\n        indexedNums[i] = indexedNum{num, i}\n    }\n    slices.SortFunc(indexedNums, func(a, b indexedNum) int {\n        return cmp.Compare(a.Value, b.Value)\n    })\n    left, right := 0, len(nums)-1\n    for left &lt; right {\n        sum := indexedNums[left].Value + indexedNums[right].Value\n        if sum == target {\n            return []int{indexedNums[left].Index, indexedNums[right].Index}\n        } else if sum &gt; target {\n            right--\n        } else {\n            left++\n        }\n    }\n    return nil\n}\n\n// \u65f6\u95f4\u590d\u6742\u5ea6: O(n), \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\nfunc twoSum2(nums []int, target int) []int {\n    hashTable := make(map[int]int)\n    for index2, num2 := range nums {\n        num1 := target - num2\n        if index1, ok := hashTable[num1]; ok {\n            return []int{index1, index2}\n        } else {\n            hashTable[num2] = index2\n        }\n    }\n    return nil\n}\n</code></pre> <p>\u7b2c\u4e00\u53cd\u5e94\u662f\u6392\u5e8f\u540e\u53cc\u6307\u9488\uff0c\u4f46\u7531\u4e8e\u9700\u8981\u8fd4\u56de\u539f\u6570\u7ec4\u7d22\u5f15\u800c\u975e\u6570\u503c\uff0c\u56e0\u6b64\u5fc5\u987b\u501f\u52a9\u8f85\u52a9\u6570\u7ec4\u3002</p>"},{"location":"hot100/hashTable/LC128/","title":"LC128 - \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":"LongestConsecutiveSequence.go<pre><code>package HashTable\n\n// \u65f6\u95f4\u590d\u6742\u5ea6: O(n), \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\nfunc longestConsecutive(nums []int) int {\n    hashSet := make(map[int]bool)\n    for _, num := range nums {\n        hashSet[num] = true\n    }\n    result := 0\n    for num := range hashSet {\n        if hashSet[num-1] {\n            continue\n        }\n        tmp := num\n        for hashSet[tmp] {\n            tmp++\n        }\n        result = max(result, tmp-num)\n    }\n    return result\n}\n</code></pre> <p>\u6700\u5173\u952e\u7684\u90e8\u5206\u5c31\u662f11-13\u884c\uff0c\u6b63\u662f\u6709\u4e86\u8fd9\u91cc\u7684\u526a\u679d\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u624d\u5f97\u4ee5\u63a7\u5236\u5728O(n)\u3002</p> <p>\u9664\u6b64\u4ee5\u5916\u5fc5\u987b\u904d\u5386\u54c8\u5e0c\u8868\u800c\u975e\u539f\u59cb\u6570\u7ec4\uff0c\u56e0\u4e3a\u539f\u59cb\u6570\u636e\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u6570\u5b57\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b(\u5982: 1111...2345...)\u4f1a\u4f7f\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230O(n^2)\u89c4\u6a21\u3002</p>"},{"location":"hot100/hashTable/LC49/","title":"LC49 - \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"GroupAnagrams.go<pre><code>package HashTable\n\nimport \"slices\"\n\nfunc groupAnagrams(strs []string) [][]string {\n    hashTable := make(map[string][]string)\n    for _, str := range strs {\n        strByte := []byte(str)\n        slices.Sort(strByte)\n        s := string(strByte)\n        hashTable[s] = append(hashTable[s], str)\n    }\n    result := make([][]string, 0)\n    for _, group := range hashTable {\n        result = append(result, group)\n    }\n    return result\n}\n</code></pre>"}]}